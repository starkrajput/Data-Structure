#include <bits/stdc++.h>

using namespace std;

class Node {
    public:
        int data;
        Node *left;
        Node *right;
        Node(int d) {
            data = d;
            left = NULL;
            right = NULL;
        }
};

class Solution {
    public:
  	
  	void preOrder(Node *root) {
		
      	if( root == NULL )
          	return;
      
      	std::cout << root->data << " ";
      	
      	preOrder(root->left);
      	preOrder(root->right);
    }
/*
Node is defined as 

class Node {
    public:
        int data;
        Node *left;
        Node *right;
        Node(int d) {
            data = d;
            left = NULL;
            right = NULL;
        }
};

*/

   





    Node * insert(Node * root, int data) {
       Node *m = (Node*)malloc(sizeof(Node));
       m->data=data;
       m->right=NULL;
       m->left=NULL;
       Node *temp=root;
       if(root==NULL)return m;
       while(1){
         if(temp->data>m->data){
           if(temp->left){
               temp=temp->left;
           }
           else{
               temp->left=m;
               break;
           }
             
         }
        else{
            if(temp->right){
                temp=temp->right;
            }
            else{
                temp->right=m;
                break;
            }
        }
       
       }
        return root;
    }

};

int main() {
  
    Solution myTree;
    Node* root = NULL;
    
    int t;
    int data;

    std::cin >> t;

    while(t-- > 0) {
        std::cin >> data;
        root = myTree.insert(root, data);
    }
  	
    myTree.preOrder(root);
  
    return 0;
}
